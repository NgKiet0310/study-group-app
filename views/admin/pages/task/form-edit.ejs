<% layout('layouts/main-admin') %>

<div class="container mt-5 animate__animated animate__fadeIn">
  <div class="card shadow-lg rounded-4 border-0">
    <div class="card-header bg-gradient-warning text-white fw-semibold fs-4 p-4 d-flex justify-content-between align-items-center">
      <span><i class="bi bi-pencil-square me-2 animate__animated animate__pulse animate__infinite"></i>S·ª≠a nhi·ªám v·ª•</span>
      <a href="/admin/tasks" class="btn btn-light btn-sm fw-semibold rounded-pill">
        <i class="bi bi-arrow-left me-1"></i>Quay l·∫°i
      </a>
    </div>
    <div class="card-body p-4">
      <!-- Hi·ªÉn th·ªã th√¥ng b√°o success -->
      <% if (typeof success !== 'undefined' && success) { %>
        <div class="alert alert-success alert-dismissible fade show rounded-3" role="alert">
          <%= success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- Hi·ªÉn th·ªã th√¥ng b√°o l·ªói -->
      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger alert-dismissible fade show rounded-3" role="alert">
          <%= error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- Th√¥ng tin task hi·ªán t·∫°i -->
      <div class="alert alert-info rounded-3 mb-4">
        <h6 class="fw-semibold mb-2"><i class="bi bi-info-circle me-1"></i>Th√¥ng tin hi·ªán t·∫°i:</h6>
        <p class="mb-1"><strong>ID:</strong> <%= task._id %></p>
        <p class="mb-1"><strong>T·∫°o l√∫c:</strong> <%= new Date(task.createdAt).toLocaleString('vi-VN') %></p>
        <% if (task.updatedAt && task.updatedAt.getTime() !== task.createdAt.getTime()) { %>
          <p class="mb-0"><strong>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</strong> <%= new Date(task.updatedAt).toLocaleString('vi-VN') %></p>
        <% } %>
      </div>

      <!-- Form s·ª≠a task -->
      <form method="POST" action="/admin/tasks/edit/<%= task._id %>" id="taskEditForm">
        <input type="hidden" name="_method" value="PUT">
        
        <div class="row g-3">
          <!-- Ti√™u ƒë·ªÅ nhi·ªám v·ª• -->
          <div class="col-md-6">
            <label for="title" class="form-label fw-semibold">
              Ti√™u ƒë·ªÅ <span class="text-danger">*</span>
            </label>
            <input 
              type="text" 
              class="form-control rounded-3" 
              id="title" 
              name="title" 
              placeholder="Nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•" 
              value="<%= formData?.title || task.title %>" 
              maxlength="200"
              required>
            <div class="form-text">T·ªëi ƒëa 200 k√Ω t·ª±</div>
          </div>

          <!-- Ch·ªçn ph√≤ng -->
          <div class="col-md-6">
            <label for="room" class="form-label fw-semibold">
              Ph√≤ng <span class="text-danger">*</span>
            </label>
            <select class="form-select rounded-3" id="room" name="room" required>
              <option value="">-- Ch·ªçn ph√≤ng --</option>
              <% rooms.forEach(room => { %>
                <option 
                  value="<%= room._id %>" 
                  <%= (formData?.room || task.room._id.toString()) === room._id.toString() ? 'selected' : '' %>
                  data-room-id="<%= room._id %>">
                  <%= room.name %>
                </option>
              <% }) %>
            </select>
          </div>

          <!-- Ng∆∞·ªùi t·∫°o -->
          <div class="col-md-6">
            <label for="createdBy" class="form-label fw-semibold">
              Ng∆∞·ªùi t·∫°o <span class="text-danger">*</span>
            </label>
            <select class="form-select rounded-3" id="createdBy" name="createdBy" required>
              <option value="">-- Ch·ªçn ng∆∞·ªùi t·∫°o --</option>
            </select>
            <div class="form-text">Ch·ªâ admin ph√≤ng v√† host ph√≤ng m·ªõi c√≥ quy·ªÅn t·∫°o task</div>
          </div>

          <!-- Ng∆∞·ªùi ƒë∆∞·ª£c giao nhi·ªám v·ª• -->
          <div class="col-md-6">
            <label for="assignedTo" class="form-label fw-semibold">
              Ng∆∞·ªùi ƒë∆∞·ª£c giao nhi·ªám v·ª•
            </label>
            <select class="form-select rounded-3" id="assignedTo" name="assignedTo" multiple size="4">
              <option value="" disabled>Vui l√≤ng ch·ªçn ph√≤ng tr∆∞·ªõc ƒë·ªÉ t·∫£i danh s√°ch th√†nh vi√™n</option>
            </select>
            <div class="form-text">
              Gi·ªØ Ctrl (Windows) ho·∫∑c Cmd (Mac) ƒë·ªÉ ch·ªçn nhi·ªÅu ng∆∞·ªùi. 
              Ch·ªâ th√†nh vi√™n th∆∞·ªùng c·ªßa ph√≤ng m·ªõi hi·ªÉn th·ªã.
            </div>
          </div>

          <!-- Tr·∫°ng th√°i -->
          <div class="col-md-6">
            <label for="status" class="form-label fw-semibold">Tr·∫°ng th√°i</label>
            <select class="form-select rounded-3" id="status" name="status">
              <option value="pending" <%= (formData?.status || task.status) === 'pending' ? 'selected' : '' %>>
                üìã Ch·ªù x·ª≠ l√Ω
              </option>
              <option value="in-progress" <%= (formData?.status || task.status) === 'in-progress' ? 'selected' : '' %>>
                ‚ö° ƒêang th·ª±c hi·ªán
              </option>
              <option value="completed" <%= (formData?.status || task.status) === 'completed' ? 'selected' : '' %>>
                ‚úÖ Ho√†n th√†nh
              </option>
            </select>
          </div>

          <!-- Ng√†y h·∫øt h·∫°n -->
          <div class="col-md-6">
            <label for="dueDate" class="form-label fw-semibold">Ng√†y h·∫øt h·∫°n</label>
            <input 
              type="datetime-local" 
              class="form-control rounded-3" 
              id="dueDate" 
              name="dueDate" 
              value="<%= formData?.dueDate || (task.dueDate ? task.dueDate.toISOString().slice(0,16) : '') %>"
              min="<%= new Date().toISOString().slice(0,16) %>">
            <div class="form-text">ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥ h·∫°n ch·∫ø th·ªùi gian</div>
          </div>

          <!-- M√¥ t·∫£ -->
          <div class="col-12">
            <label for="description" class="form-label fw-semibold">M√¥ t·∫£ chi ti·∫øt</label>
            <textarea 
              class="form-control rounded-3" 
              id="description" 
              name="description" 
              rows="5" 
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ nhi·ªám v·ª•..."
              maxlength="1000"><%= formData?.description || task.description || '' %></textarea>
            <div class="form-text">T·ªëi ƒëa 1000 k√Ω t·ª±. C√≤n l·∫°i: <span id="descCount">1000</span></div>
          </div>
        </div>

        <!-- N√∫t h√†nh ƒë·ªông -->
        <div class="d-flex gap-2 mt-4">
          <button type="submit" class="btn btn-warning rounded-pill px-4" id="submitBtn">
            <i class="bi bi-save me-1"></i>C·∫≠p nh·∫≠t nhi·ªám v·ª•
          </button>
          <button type="button" class="btn btn-outline-info rounded-pill px-4" id="resetBtn">
            <i class="bi bi-arrow-clockwise me-1"></i>Kh√¥i ph·ª•c
          </button>
          <a href="/admin/tasks" class="btn btn-outline-secondary rounded-pill px-4">
            <i class="bi bi-arrow-left me-1"></i>H·ªßy b·ªè
          </a>
          <button type="button" class="btn btn-outline-danger rounded-pill px-4 ms-auto" id="deleteBtn" 
                  data-task-id="<%= task._id %>" data-task-title="<%= task.title %>">
            <i class="bi bi-trash me-1"></i>X√≥a nhi·ªám v·ª•
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal x√°c nh·∫≠n x√≥a -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content rounded-4 border-0">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteModalLabel">
          <i class="bi bi-exclamation-triangle me-2"></i>X√°c nh·∫≠n x√≥a
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form method="POST" action="/admin/tasks/<%= task._id %>?_method=DELETE" id="deleteTaskForm">
        <div class="modal-body">
          <p class="mb-3">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nhi·ªám v·ª• n√†y kh√¥ng?</p>
          <div class="alert alert-warning">
            <strong>Nhi·ªám v·ª•:</strong> <span id="taskTitleToDelete"><%= task.title %></span>
          </div>
          <p class="text-muted small mb-0">
            <i class="bi bi-info-circle me-1"></i>
            H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
          </p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary rounded-pill" data-bs-dismiss="modal">
            <i class="bi bi-x me-1"></i>H·ªßy
          </button>
          <button type="submit" class="btn btn-danger rounded-pill" id="confirmDeleteBtn">
            <i class="bi bi-trash me-1"></i>X√≥a nhi·ªám v·ª•
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- CSS Styles -->
<style>
  .bg-gradient-warning {
    background: linear-gradient(45deg, #ff8c00, #ffd700);
  }
  
  .card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.25) !important;
  }
  
  .btn, .form-control, .form-select {
    transition: all 0.3s ease;
  }
  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  .form-control:focus, .form-select:focus {
    border-color: #ff8c00;
    box-shadow: 0 0 0 0.2rem rgba(255, 140, 0, 0.25);
  }
  
  .form-select[multiple] {
    min-height: 120px;
  }
  .form-select[multiple] option {
    padding: 8px 12px;
    margin: 2px 0;
  }
  .form-select[multiple] option:checked {
    background: linear-gradient(45deg, #ff8c00, #ffd700);
    color: white;
  }
  
  #descCount {
    font-weight: bold;
    color: #ff8c00;
  }
  
  .alert-info {
    background-color: #e3f2fd;
    border-color: #bbdefb;
    color: #0d47a1;
  }
  
  @media (max-width: 768px) {
    .card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    .d-flex.gap-2 {
      flex-direction: column;
    }
    .d-flex.gap-2 .btn {
      width: 100%;
    }
  }
</style>

<script>
  // D·ªØ li·ªáu t·ª´ server
  const roomManagers = <%- JSON.stringify(roomManagers) %>;
  const roomMembers = <%- JSON.stringify(roomMembers) %>;
  const originalTask = <%- JSON.stringify(originalTask) %>;
  const formData = <%- JSON.stringify(formData || null) %>;

  /**
   * H·∫°n ch·∫ø t√πy ch·ªçn tr·∫°ng th√°i d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i
   */
  function restrictStatusOptions() {
    const statusSelect = document.getElementById('status');
    const currentStatus = originalTask.status;

    // N·∫øu tr·∫°ng th√°i l√† "completed", v√¥ hi·ªáu h√≥a to√†n b·ªô select
    if (currentStatus === 'completed') {
      statusSelect.disabled = true;
      statusSelect.title = 'Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i';
      return;
    }

    // N·∫øu tr·∫°ng th√°i l√† "in-progress", v√¥ hi·ªáu h√≥a t√πy ch·ªçn "pending"
    if (currentStatus === 'in-progress') {
      const pendingOption = statusSelect.querySelector('option[value="pending"]');
      pendingOption.disabled = true;
      pendingOption.title = 'Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ "ƒêang th·ª±c hi·ªán" v·ªÅ "Ch·ªù x·ª≠ l√Ω"';
    }
  }

  /**
   * C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi t·∫°o khi ch·ªçn ph√≤ng
   */
  function updateCreatedBy(roomId) {
    const createdBySelect = document.getElementById('createdBy');
    createdBySelect.innerHTML = '<option value="">-- Ch·ªçn ng∆∞·ªùi t·∫°o --</option>';
    
    if (!roomId || !roomManagers[roomId]) {
      return;
    }

    roomManagers[roomId].forEach(manager => {
      const option = document.createElement('option');
      option.value = manager._id;
      option.textContent = `${manager.username} (${manager.role === 'admin' ? 'Admin ph√≤ng' : 'Host ph√≤ng'})`;
      const selectedCreatedBy = formData?.createdBy || originalTask.createdBy;
      if (selectedCreatedBy === manager._id) {
        option.selected = true;
      }
      createdBySelect.appendChild(option);
    });
  }

  /**
   * C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ƒë∆∞·ª£c giao khi ch·ªçn ph√≤ng
   */
  function updateAssignedTo(roomId) {
    const assignedToSelect = document.getElementById('assignedTo');
    assignedToSelect.innerHTML = '';
    
    if (!roomId) {
      assignedToSelect.innerHTML = '<option value="" disabled>Vui l√≤ng ch·ªçn ph√≤ng tr∆∞·ªõc ƒë·ªÉ t·∫£i danh s√°ch th√†nh vi√™n</option>';
      return;
    }

    if (!roomMembers[roomId] || roomMembers[roomId].length === 0) {
      assignedToSelect.innerHTML = '<option value="" disabled>Ph√≤ng n√†y ch∆∞a c√≥ th√†nh vi√™n n√†o</option>';
      return;
    }

    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = '-- Ch·ªçn th√†nh vi√™n (c√≥ th·ªÉ ch·ªçn nhi·ªÅu) --';
    assignedToSelect.appendChild(defaultOption);

    roomMembers[roomId].forEach(member => {
      const option = document.createElement('option');
      option.value = member._id;
      option.textContent = member.username;
      const selectedAssignedTo = formData?.assignedTo || originalTask.assignedTo;
      if (selectedAssignedTo && selectedAssignedTo.includes(member._id)) {
        option.selected = true;
      }
      assignedToSelect.appendChild(option);
    });
  }

  /**
   * C·∫≠p nh·∫≠t character counter cho textarea description
   */
  function updateCharacterCount() {
    const textarea = document.getElementById('description');
    const counter = document.getElementById('descCount');
    const maxLength = 1000;
    
    if (textarea && counter) {
      const remaining = maxLength - textarea.value.length;
      counter.textContent = remaining;
      counter.style.color = remaining < 100 ? '#dc3545' : remaining < 200 ? '#ffc107' : '#ff8c00';
    }
  }

  /**
   * Validate form tr∆∞·ªõc khi submit
   */
  function validateForm() {
    const title = document.getElementById('title').value.trim();
    const room = document.getElementById('room').value;
    const createdBy = document.getElementById('createdBy').value;
    const status = document.getElementById('status').value;
    
    if (!title) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•');
      return false;
    }
    
    if (title.length < 3) {
      alert('Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
      return false;
    }
    
    if (!room) {
      alert('Vui l√≤ng ch·ªçn ph√≤ng');
      return false;
    }
    
    if (!createdBy) {
      alert('Vui l√≤ng ch·ªçn ng∆∞·ªùi t·∫°o nhi·ªám v·ª•');
      return false;
    }
    
    // Ki·ªÉm tra ng√†y h·∫øt h·∫°n
    const dueDate = document.getElementById('dueDate').value;
    if (dueDate) {
      const dueDateObj = new Date(dueDate);
      const now = new Date();
      if (dueDateObj <= now) {
        alert('Ng√†y h·∫øt h·∫°n ph·∫£i l√† th·ªùi ƒëi·ªÉm trong t∆∞∆°ng lai');
        return false;
      }
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i
    if (originalTask.status === 'completed') {
      if (status !== 'completed') {
        alert('Nhi·ªám v·ª• ƒë√£ ho√†n th√†nh kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i');
        return false;
      }
    } else if (originalTask.status === 'in-progress' && status === 'pending') {
      alert('Kh√¥ng th·ªÉ chuy·ªÉn t·ª´ "ƒêang th·ª±c hi·ªán" v·ªÅ "Ch·ªù x·ª≠ l√Ω"');
      return false;
    }
    
    return true;
  }

  /**
   * Kh√¥i ph·ª•c v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
   */
  function resetToOriginal() {
    document.getElementById('title').value = originalTask.title;
    document.getElementById('description').value = originalTask.description;
    document.getElementById('room').value = originalTask.room;
    document.getElementById('status').value = originalTask.status;
    document.getElementById('dueDate').value = originalTask.dueDate;
    updateCreatedBy(originalTask.room);
    updateAssignedTo(originalTask.room);
    updateCharacterCount();
    restrictStatusOptions(); // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i
  }

  /**
   * X·ª≠ l√Ω x√≥a task
   */
  function handleDeleteTask() {
    const deleteBtn = document.getElementById('deleteBtn');
    const taskTitle = deleteBtn.dataset.taskTitle;
    document.getElementById('taskTitleToDelete').textContent = taskTitle;
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
    deleteModal.show();
  }

  /**
   * Ki·ªÉm tra thay ƒë·ªïi trong form
   */
  function hasFormChanged() {
    const currentData = {
      title: document.getElementById('title').value.trim(),
      description: document.getElementById('description').value.trim(),
      room: document.getElementById('room').value,
      createdBy: document.getElementById('createdBy').value,
      assignedTo: Array.from(document.getElementById('assignedTo').selectedOptions).map(opt => opt.value),
      status: document.getElementById('status').value,
      dueDate: document.getElementById('dueDate').value
    };
    
    return (
      currentData.title !== originalTask.title ||
      currentData.description !== originalTask.description ||
      currentData.room !== originalTask.room ||
      currentData.createdBy !== originalTask.createdBy ||
      JSON.stringify(currentData.assignedTo.sort()) !== JSON.stringify(originalTask.assignedTo.sort()) ||
      currentData.status !== originalTask.status ||
      currentData.dueDate !== originalTask.dueDate
    );
  }

  /**
   * Kh·ªüi t·∫°o khi DOM ready
   */
  document.addEventListener('DOMContentLoaded', function() {
    const roomSelect = document.getElementById('room');
    const descriptionTextarea = document.getElementById('description');
    const taskEditForm = document.getElementById('taskEditForm');
    const resetBtn = document.getElementById('resetBtn');
    const deleteBtn = document.getElementById('deleteBtn');
    
    // Kh·ªüi t·∫°o tr·∫°ng th√°i
    restrictStatusOptions();
    
    // Event listener cho vi·ªác thay ƒë·ªïi ph√≤ng
    if (roomSelect) {
      roomSelect.addEventListener('change', function() {
        const selectedRoomId = this.value;
        updateCreatedBy(selectedRoomId);
        updateAssignedTo(selectedRoomId);
      });
      if (roomSelect.value) {
        updateCreatedBy(roomSelect.value);
        updateAssignedTo(roomSelect.value);
      }
    }
    
    // Character counter cho description
    if (descriptionTextarea) {
      descriptionTextarea.addEventListener('input', updateCharacterCount);
      updateCharacterCount();
    }
    
    // Form validation khi submit
    if (taskEditForm) {
      taskEditForm.addEventListener('submit', function(e) {
        if (!validateForm()) {
          e.preventDefault();
          return;
        }
        
        if (!hasFormChanged()) {
          e.preventDefault();
          alert('Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ l∆∞u');
          return;
        }
        
        const submitBtn = document.getElementById('submitBtn');
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="bi bi-spinner spinner-border spinner-border-sm me-1"></i>ƒêang c·∫≠p nh·∫≠t...';
        }
      });
    }
    
    // Reset button functionality
    if (resetBtn) {
      resetBtn.addEventListener('click', function() {
        if (hasFormChanged()) {
          if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c v·ªÅ gi√° tr·ªã ban ƒë·∫ßu? C√°c thay ƒë·ªïi s·∫Ω b·ªã m·∫•t.')) {
            resetToOriginal();
          }
        }
      });
    }
    
    // Delete button functionality
    if (deleteBtn) {
      deleteBtn.addEventListener('click', handleDeleteTask);
    }
    
    // C·∫£nh b√°o khi r·ªùi trang n·∫øu c√≥ thay ƒë·ªïi
    window.addEventListener('beforeunload', function(e) {
      if (hasFormChanged()) {
        e.preventDefault();
        e.returnValue = 'B·∫°n c√≥ c√°c thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi trang?';
      }
    });
  });
</script>