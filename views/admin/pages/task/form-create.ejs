<% layout('layouts/main-admin') %>

<div class="container mt-5 animate__animated animate__fadeIn">
  <div class="card shadow-lg rounded-4 border-0">
    <div class="card-header bg-gradient-primary text-white fw-semibold fs-4 p-4 d-flex justify-content-between align-items-center">
      <span><i class="bi bi-list-task me-2 animate__animated animate__pulse animate__infinite"></i>T·∫°o nhi·ªám v·ª• m·ªõi</span>
      <a href="/admin/tasks" class="btn btn-light btn-sm fw-semibold rounded-pill">
        <i class="bi bi-arrow-left me-1"></i>Quay l·∫°i
      </a>
    </div>
    <div class="card-body p-4">
      <!-- Hi·ªÉn th·ªã th√¥ng b√°o success -->
      <% if (typeof success !== 'undefined' && success) { %>
        <div class="alert alert-success alert-dismissible fade show rounded-3" role="alert">
          <%= success %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- Hi·ªÉn th·ªã th√¥ng b√°o l·ªói -->
      <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-danger alert-dismissible fade show rounded-3" role="alert">
          <%= error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- Form t·∫°o task -->
      <form method="POST" action="/admin/tasks/create" id="taskForm">
        <div class="row g-3">
          <!-- Ti√™u ƒë·ªÅ nhi·ªám v·ª• -->
          <div class="col-md-6">
            <label for="title" class="form-label fw-semibold">
              Ti√™u ƒë·ªÅ <span class="text-danger">*</span>
            </label>
            <input 
              type="text" 
              class="form-control rounded-3" 
              id="title" 
              name="title" 
              placeholder="Nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•" 
              value="<%= formData?.title || '' %>" 
              maxlength="200"
              required>
            <div class="form-text">T·ªëi ƒëa 200 k√Ω t·ª±</div>
          </div>

          <!-- Ch·ªçn ph√≤ng -->
          <div class="col-md-6">
            <label for="room" class="form-label fw-semibold">
              Ph√≤ng <span class="text-danger">*</span>
            </label>
            <select class="form-select rounded-3" id="room" name="room" required>
              <option value="">-- Ch·ªçn ph√≤ng --</option>
              <% rooms.forEach(room => { %>
                <option 
                  value="<%= room._id %>" 
                  <%= formData?.room === room._id.toString() ? 'selected' : '' %>
                  data-room-id="<%= room._id %>">
                  <%= room.name %>
                </option>
              <% }) %>
            </select>
          </div>

          <!-- Ng∆∞·ªùi t·∫°o - Admin ph√≤ng v√† Host ph√≤ng -->
          <div class="col-md-6">
            <label for="createdBy" class="form-label fw-semibold">
              Ng∆∞·ªùi t·∫°o <span class="text-danger">*</span>
            </label>
            <select class="form-select rounded-3" id="createdBy" name="createdBy" required>
              <option value="">-- Ch·ªçn ng∆∞·ªùi t·∫°o --</option>
            </select>
            <div class="form-text">Ch·ªâ admin ph√≤ng v√† host ph√≤ng m·ªõi c√≥ quy·ªÅn t·∫°o task</div>
          </div>

          <!-- Ng∆∞·ªùi ƒë∆∞·ª£c giao nhi·ªám v·ª• - Members c·ªßa ph√≤ng -->
          <div class="col-md-6">
            <label for="assignedTo" class="form-label fw-semibold">
              Ng∆∞·ªùi ƒë∆∞·ª£c giao nhi·ªám v·ª•
            </label>
            <select class="form-select rounded-3" id="assignedTo" name="assignedTo" multiple size="4">
              <option value="" disabled>Vui l√≤ng ch·ªçn ph√≤ng tr∆∞·ªõc ƒë·ªÉ t·∫£i danh s√°ch th√†nh vi√™n</option>
            </select>
            <div class="form-text">
              Gi·ªØ Ctrl (Windows) ho·∫∑c Cmd (Mac) ƒë·ªÉ ch·ªçn nhi·ªÅu ng∆∞·ªùi. 
              Ch·ªâ th√†nh vi√™n th∆∞·ªùng c·ªßa ph√≤ng m·ªõi hi·ªÉn th·ªã.
            </div>
          </div>

          <!-- Tr·∫°ng th√°i -->
          <div class="col-md-6">
            <label for="status" class="form-label fw-semibold">Tr·∫°ng th√°i</label>
            <select class="form-select rounded-3" id="status" name="status">
              <option value="pending" <%= formData?.status === 'pending' || !formData?.status ? 'selected' : '' %>>
                üìã Ch·ªù x·ª≠ l√Ω
              </option>
              <option value="in-progress" <%= formData?.status === 'in-progress' ? 'selected' : '' %>>
                ‚ö° ƒêang th·ª±c hi·ªán
              </option>
              <option value="completed" <%= formData?.status === 'completed' ? 'selected' : '' %>>
                ‚úÖ Ho√†n th√†nh
              </option>
            </select>
          </div>

          <!-- Ng√†y h·∫øt h·∫°n -->
          <div class="col-md-6">
            <label for="dueDate" class="form-label fw-semibold">Ng√†y h·∫øt h·∫°n</label>
            <input 
              type="datetime-local" 
              class="form-control rounded-3" 
              id="dueDate" 
              name="dueDate" 
              value="<%= formData?.dueDate ? new Date(formData.dueDate).toISOString().slice(0,16) : '' %>"
              min="<%= new Date().toISOString().slice(0,16) %>">
            <div class="form-text">ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥ h·∫°n ch·∫ø th·ªùi gian</div>
          </div>

          <!-- M√¥ t·∫£ -->
          <div class="col-12">
            <label for="description" class="form-label fw-semibold">M√¥ t·∫£ chi ti·∫øt</label>
            <textarea 
              class="form-control rounded-3" 
              id="description" 
              name="description" 
              rows="5" 
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ nhi·ªám v·ª•..."
              maxlength="1000"><%= formData?.description || '' %></textarea>
            <div class="form-text">T·ªëi ƒëa 1000 k√Ω t·ª±. C√≤n l·∫°i: <span id="descCount">1000</span></div>
          </div>
        </div>

        <!-- N√∫t h√†nh ƒë·ªông -->
        <div class="d-flex gap-2 mt-4">
          <button type="submit" class="btn btn-primary rounded-pill px-4" id="submitBtn">
            <i class="bi bi-save me-1"></i>T·∫°o nhi·ªám v·ª•
          </button>
          <button type="reset" class="btn btn-outline-warning rounded-pill px-4">
            <i class="bi bi-arrow-clockwise me-1"></i>L√†m m·ªõi
          </button>
          <a href="/admin/tasks" class="btn btn-outline-secondary rounded-pill px-4">
            <i class="bi bi-arrow-left me-1"></i>H·ªßy b·ªè
          </a>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- CSS Styles -->
<style>
  .bg-gradient-primary {
    background: linear-gradient(45deg, #0052cc, #00c4ff);
  }
  
  .card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.25) !important;
  }
  
  .btn, .form-control, .form-select {
    transition: all 0.3s ease;
  }
  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  .form-control:focus, .form-select:focus {
    border-color: #0052cc;
    box-shadow: 0 0 0 0.2rem rgba(0, 82, 204, 0.25);
  }
  
  .form-select[multiple] {
    min-height: 120px;
  }
  .form-select[multiple] option {
    padding: 8px 12px;
    margin: 2px 0;
  }
  .form-select[multiple] option:checked {
    background: linear-gradient(45deg, #0052cc, #00c4ff);
    color: white;
  }
  
  #descCount {
    font-weight: bold;
    color: #0052cc;
  }
  
  @media (max-width: 768px) {
    .card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    .d-flex.gap-2 {
      flex-direction: column;
    }
    .d-flex.gap-2 .btn {
      width: 100%;
    }
  }
</style>

<!-- JavaScript Logic -->
<script>
// D·ªØ li·ªáu t·ª´ server
const roomManagers = JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(roomManagers || {})) %>'));
const roomMembers = JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(roomMembers || {})) %>'));
const formData = JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(formData || {})) %>'));

console.log('Room Managers:', roomManagers);
console.log('Room Members:', roomMembers);

/**
 * C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi t·∫°o khi ch·ªçn ph√≤ng
 */
function updateCreatedBy(roomId) {
  const createdBySelect = document.getElementById('createdBy');
  
  // Reset danh s√°ch
  createdBySelect.innerHTML = '<option value="">-- Ch·ªçn ng∆∞·ªùi t·∫°o --</option>';
  
  if (!roomId || !roomManagers[roomId]) {
    return;
  }

  // Th√™m admin ph√≤ng v√† host ph√≤ng
  roomManagers[roomId].forEach(manager => {
    const option = document.createElement('option');
    option.value = manager._id;
    option.textContent = `${manager.username} (${manager.role === 'admin' ? 'Admin ph√≤ng' : 'Host ph√≤ng'})`;
    
    // Gi·ªØ l·∫°i selection n·∫øu c√≥ formData
    if (formData?.createdBy === manager._id) {
      option.selected = true;
    }
    
    createdBySelect.appendChild(option);
  });
}

/**
 * C·∫≠p nh·∫≠t danh s√°ch assignedTo khi ch·ªçn ph√≤ng
 */
function updateAssignedTo(roomId) {
  const assignedToSelect = document.getElementById('assignedTo');
  
  // Reset danh s√°ch
  assignedToSelect.innerHTML = '';
  
  if (!roomId) {
    assignedToSelect.innerHTML = '<option value="" disabled>Vui l√≤ng ch·ªçn ph√≤ng tr∆∞·ªõc ƒë·ªÉ t·∫£i danh s√°ch th√†nh vi√™n</option>';
    return;
  }

  // Ki·ªÉm tra ph√≤ng c√≥ members kh√¥ng
  if (!roomMembers[roomId] || roomMembers[roomId].length === 0) {
    assignedToSelect.innerHTML = '<option value="" disabled>Ph√≤ng n√†y ch∆∞a c√≥ th√†nh vi√™n n√†o</option>';
    return;
  }

  // Th√™m option m·∫∑c ƒë·ªãnh
  const defaultOption = document.createElement('option');
  defaultOption.value = '';
  defaultOption.textContent = '-- Ch·ªçn th√†nh vi√™n (c√≥ th·ªÉ ch·ªçn nhi·ªÅu) --';
  assignedToSelect.appendChild(defaultOption);

  // Th√™m t·ª´ng member v√†o select
  roomMembers[roomId].forEach(member => {
    const option = document.createElement('option');
    option.value = member._id;
    option.textContent = member.username;
    
    // Gi·ªØ l·∫°i selection n·∫øu c√≥ formData
    if (formData?.assignedTo && formData.assignedTo.includes(member._id)) {
      option.selected = true;
    }
    
    assignedToSelect.appendChild(option);
  });

  console.log(`ƒê√£ load ${roomMembers[roomId].length} th√†nh vi√™n cho ph√≤ng ${roomId}`);
}

/**
 * C·∫≠p nh·∫≠t character counter cho textarea description
 */
function updateCharacterCount() {
  const textarea = document.getElementById('description');
  const counter = document.getElementById('descCount');
  const maxLength = 1000;
  
  if (textarea && counter) {
    const remaining = maxLength - textarea.value.length;
    counter.textContent = remaining;
    
    // ƒê·ªïi m√†u khi g·∫ßn h·∫øt
    if (remaining < 100) {
      counter.style.color = '#dc3545'; // M√†u ƒë·ªè
    } else if (remaining < 200) {
      counter.style.color = '#ffc107'; // M√†u v√†ng
    } else {
      counter.style.color = '#0052cc'; // M√†u xanh m·∫∑c ƒë·ªãnh
    }
  }
}

/**
 * Validate form tr∆∞·ªõc khi submit
 */
function validateForm() {
  const title = document.getElementById('title').value.trim();
  const room = document.getElementById('room').value;
  const createdBy = document.getElementById('createdBy').value;
  
  if (!title) {
    alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ nhi·ªám v·ª•');
    return false;
  }
  
  if (title.length < 3) {
    alert('Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±');
    return false;
  }
  
  if (!room) {
    alert('Vui l√≤ng ch·ªçn ph√≤ng');
    return false;
  }
  
  if (!createdBy) {
    alert('Vui l√≤ng ch·ªçn ng∆∞·ªùi t·∫°o nhi·ªám v·ª•');
    return false;
  }
  
  // Ki·ªÉm tra ng√†y h·∫øt h·∫°n
  const dueDate = document.getElementById('dueDate').value;
  if (dueDate) {
    const dueDateObj = new Date(dueDate);
    const now = new Date();
    
    if (dueDateObj <= now) {
      alert('Ng√†y h·∫øt h·∫°n ph·∫£i l√† th·ªùi ƒëi·ªÉm trong t∆∞∆°ng lai');
      return false;
    }
  }
  
  return true;
}

/**
 * Kh·ªüi t·∫°o khi DOM ready
 */
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, initializing form...');
  
  const roomSelect = document.getElementById('room');
  const descriptionTextarea = document.getElementById('description');
  const taskForm = document.getElementById('taskForm');
  
  // Event listener cho vi·ªác thay ƒë·ªïi ph√≤ng
  if (roomSelect) {
    roomSelect.addEventListener('change', function() {
      const selectedRoomId = this.value;
      console.log('Room changed to:', selectedRoomId);
      updateCreatedBy(selectedRoomId); // C·∫≠p nh·∫≠t ng∆∞·ªùi t·∫°o
      updateAssignedTo(selectedRoomId); // C·∫≠p nh·∫≠t ng∆∞·ªùi ƒë∆∞·ª£c giao
    });
    
    // Load data cho ph√≤ng ƒë√£ ƒë∆∞·ª£c ch·ªçn s·∫µn (n·∫øu c√≥ formData)
    if (roomSelect.value) {
      updateCreatedBy(roomSelect.value);
      updateAssignedTo(roomSelect.value);
    }
  }
  
  // Character counter cho description
  if (descriptionTextarea) {
    descriptionTextarea.addEventListener('input', updateCharacterCount);
    updateCharacterCount();
  }
  
  // Form validation khi submit
  if (taskForm) {
    taskForm.addEventListener('submit', function(e) {
      if (!validateForm()) {
        e.preventDefault();
      } else {
        // Hi·ªÉn th·ªã loading state
        const submitBtn = document.getElementById('submitBtn');
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="bi bi-spinner spinner-border spinner-border-sm me-1"></i>ƒêang t·∫°o...';
        }
      }
    });
  }
  
  // Reset button functionality
  const resetBtn = document.querySelector('button[type="reset"]');
  if (resetBtn) {
    resetBtn.addEventListener('click', function() {
      setTimeout(() => {
        updateCreatedBy('');
        updateAssignedTo('');
        updateCharacterCount();
      }, 100);
    });
  }
  
  console.log('Form initialization completed');
});
</script>